import math
a, b, c = map(int, input().split())

# 簡単のために長方形を正方形に切り分けることをまず考える
# 仮に長さxで切るとすると、切り分けた結果をすべて正方形にするためには、
# x未満のあまりを残してはならない(切り分けたパーツを動かせないことに注意)
# となると、xは、縦の長さHも横の長さWも割り切る(約数である)ことが必要である

# さらに、そのようなxを使って最小手数で切り分けたいから、xはなるべく大きい方がよい
# すなわち、最適な切り分け長さxは、HとWの最大公約数である

# これは直方体で考えても同じことである
# なぜなら、長方形を正方形に切り分けつつ、同時に奥行きも同じ長さで切り分ける必要があり、
# それは結局、H, W, Lを共に割り切るようなxのうち最大のものを求めることであるから

# では、最大公約数gcdを求めたら、その長さに切り分けるのに何手必要か？
# まず一辺(Hとする)について考えると、H/gcd個のパーツになるから、その個数-1回の切り分けが必要
# この問題では、切り分けた後もパーツは合体している=同時に切るから。
# 結局は各辺ごとに独立でgcdで割った商-1回とすればよい
# (余談だが、切り分けたものを別々に切る場合は切る順番によらず最終的なパーツ数-1である)

gcd_ = math.gcd(math.gcd(a, b), c)
ans = a//gcd_-1 + b//gcd_-1 + c//gcd_-1

print(ans)